using CSharpLibs.Minecraft;
using System;
using System.IO;
using System.Windows.Forms;

namespace MinecraftServerLauncher
{
  public partial class ServerProfileConfigDialog : Form
  {

    #region ===== Internal Helper Methods =====

    #region Method: CheckEulaTxt

    /// <summary>
    /// Checks to see if the eula.txt file exists, if not it is generated to indicate the EULA has been accepted.
    /// </summary>
    private void CheckEulaTxt()
    {
      string path = txtServerPath.Text.Trim();
      string filePathName = path + "eula.txt";

      if (!File.Exists(filePathName))
      {
        string eula = "";

        eula += "# Generated by Minecraft Server Launcher\r\n";
        eula += "eula=true\r\n";

        try
        {
          File.WriteAllText(filePathName, eula);
        }
        catch { }
      }
    }

    #endregion

    #region Method: CheckServerPropertiesFile

    /// <summary>
    /// Checks to see if a server.properties file exists at the server's location. If not, the file is generated with default values.
    /// </summary>
    private void CheckServerPropertiesFile()
    {
      string path = txtServerPath.Text.Trim();
      string filePathName = path + "server.properties";

      if (!File.Exists(filePathName))
      {
        string crlf = "\r\n";
        string settings = "";

        settings += "#Minecraft server properties" + crlf;
        settings += "#(File Modification Datestamp)" + crlf;
        settings += "server-ip=" + crlf;
        settings += "server-port=25565" + crlf;
        settings += "online-mode=true" + crlf;
        settings += "level-name=world" + crlf;
        settings += "level-type=DEFAULT" + crlf;
        settings += "generator-settings=" + crlf;
        settings += "level-seed=" + crlf;
        settings += "allow-nether=true" + crlf;
        settings += "spawn-protection=16" + crlf;
        settings += "generate-structures=true" + crlf;
        settings += "spawn-npcs=true" + crlf;
        settings += "spawn-animals=true" + crlf;
        settings += "spawn-monsters=true" + crlf;
        settings += "enable-command-block=false" + crlf;
        settings += "gamemode=0" + crlf;
        settings += "difficulty=1" + crlf;
        settings += "hardcore=false" + crlf;
        settings += "pvp=true" + crlf;
        settings += "max-players=20" + crlf;
        settings += "view-distance=10" + crlf;
        settings += "white-list=false" + crlf;
        settings += "motd=A Minecraft server" + crlf;

        try
        {
          File.WriteAllText(filePathName, settings);
        }
        catch { }

      }
    }

    #endregion

    #endregion

    #region ===== Properties =====

    public ServerProfile Profile { get; set; } = new ServerProfile("", "", "", 256);

    #endregion

    #region ===== Control Events =====

    private void btnSelect_Click(object sender, EventArgs e)
    {
      OpenFileDialog dialog = new OpenFileDialog();
      dialog.Filter = "Minecraft Server Jar|*.jar";
      dialog.CheckPathExists = true;
      dialog.CheckFileExists = true;
      dialog.Title = "Select the Minecraft server jar you would like to use";

      if (dialog.ShowDialog(this) == DialogResult.OK)
      {
        string filePathName = dialog.FileName;

        txtServerPath.Text = filePathName.Substring(0, filePathName.LastIndexOf('\\') + 1);
        txtServerJar.Text = filePathName.Substring(filePathName.LastIndexOf('\\') + 1, filePathName.Length - (filePathName.LastIndexOf('\\') + 1));
      }

      dialog.Dispose();
    }

    private void btnProperties_Click(object sender, EventArgs e)
    {
      if (txtServerPath.Text.Trim().Length > 0 && txtServerJar.Text.Trim().Length > 0)
      {
        ServerConfigDialog dialog = new ServerConfigDialog();
        dialog.SetMinecraftServerPath(txtServerPath.Text);
        dialog.ShowDialog(this);
        dialog.Dispose();
      }
    }

    private void btnAccept_Click(object sender, EventArgs e)
    {
      if (
        txtServerName.Text.Trim().Length > 0 &&
        txtServerPath.Text.Trim().Length > 0 &&
        txtServerJar.Text.Trim().Length > 0
        )
      {
        // Store the settings as a ServerProfile
        Profile = new ServerProfile(
          txtServerName.Text.Trim(),
          txtServerPath.Text.Trim(),
          txtServerJar.Text.Trim(),
          (int)nudMemory.Value
          );

        // Check whether the eula.txt file exists
        CheckEulaTxt();
        // Check whether the server.properties file exists
        CheckServerPropertiesFile();

        // Finally set the dialog result to OK (which forces the form closed automatically)
        this.DialogResult = DialogResult.OK;
      }
      else if (txtServerName.Text.Trim().Length == 0)
      {
        MessageBox.Show(
          "You have not provided a name for this server profile!\n\nPlease specify a name and try again.",
          "No server name specified!",
          MessageBoxButtons.OK,
          MessageBoxIcon.Exclamation
          );
        txtServerName.Focus();
      }
      else if (txtServerPath.Text.Trim().Length == 0 || txtServerJar.Text.Trim().Length == 0)
      {
        MessageBox.Show(
          "You have not selected a Minecraft server jar!\n\nPlease select the Minecraft server jar you would like to use for this server profile.",
          "No server jar selected!",
          MessageBoxButtons.OK,
          MessageBoxIcon.Exclamation
          );
        btnSelect.Focus();
      }
    }

    private void btnCancel_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
    }

    #endregion

    #region ===== Form Events =====

    private void ServerProfileConfigDialog_Load(object sender, EventArgs e)
    {

    }

    private void ServerProfileConfigDialog_Shown(object sender, EventArgs e)
    {
      // Populate the form with the custom property data

      txtServerName.Text = Profile.Name;
      txtServerPath.Text = Profile.Path;
      txtServerJar.Text = Profile.Jar;

      nudMemory.Value = Profile.MemorySize;
    }

    #endregion

    #region ===== Constructor =====

    public ServerProfileConfigDialog()
    {
      InitializeComponent();

      this.Shown += ServerProfileConfigDialog_Shown;
    }

    #endregion

  }
}
